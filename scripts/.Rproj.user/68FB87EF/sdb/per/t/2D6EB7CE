{
    "contents" : "#Load in required packages for functions below\nrequire(qpcR)\nrequire(plyr)\nrequire(ggplot2)\nrequire(splitstackshape)\n\n#Read in raw fluorescence data from 1st Actin replicate\nrep1<-read.csv(\"Actin3rawfluoro.csv\", header = T)\n#Remove blank first column entitled \"X\"\nrep1$X<-NULL\n#Rename columns so that qpcR package and appropriately handle the data\nrep1<-rename(rep1, c(\"Cycle\" = \"Cycles\", \"A1\" = \"H_C_1\", \"A2\" = \"N_C_1\",\n                     \"A3\"= \"S_C_1\", \"A4\"=\"H_T_1\", \"A5\"=\"N_T_1\",\"A6\"=\"S_T_1\",\n                     \"A7\"=\"NT_C_1\",\"B1\" = \"H_C_2\", \"B2\" = \"N_C_2\",\"B3\"= \"S_C_2\",\n                     \"B4\"=\"H_T_2\", \"B5\"=\"N_T_2\", \"B6\"=\"S_T_2\",\"B7\"=\"NT_C_2\",\n                     \"C1\" = \"H_C_3\", \"C2\" = \"N_C_3\",\"C3\"= \"S_C_3\",\"C4\"=\"H_T_3\",\n                     \"C5\"=\"N_T_3\", \"C6\"=\"S_T_3\", \"C7\"=\"NT_C_3\",\"D1\" = \"H_C_4\",\n                     \"D2\" = \"N_C_4\",\"D3\"= \"S_C_4\", \"D4\"=\"H_T_4\", \"D5\"=\"N_T_4\",\n                     \"D6\"=\"S_T_4\", \"D7\"=\"NT_C_4\",\"E1\" = \"H_C_5\", \"E2\" = \"N_C_5\",\n                     \"E3\"= \"S_C_5\", \"E4\"=\"H_T_5\", \"E5\"=\"N_T_5\", \"E6\"=\"S_T_5\",\n                     \"F1\" = \"H_C_6\", \"F2\" = \"N_C_6\",\"F3\"= \"S_C_6\", \"F4\"=\"H_T_6\",\n                     \"F5\"=\"N_T_6\", \"F6\"=\"S_T_6\",\"G1\" = \"H_C_7\", \"G2\" = \"N_C_7\",\n                     \"G3\"= \"S_C_7\", \"G4\"=\"H_T_7\", \"G5\"=\"N_T_7\", \"G6\"=\"S_T_7\",\n                     \"H1\" = \"H_C_8\", \"H2\" = \"N_C_8\",\"H3\"= \"S_C_8\", \"H4\"=\"H_T_8\",\n                     \"H5\"=\"N_T_8\", \"H6\"=\"S_T_8\"))\n\n#Run data through pcrbatch in qpcR package which analyzes fluorescence and produces efficiency and cycle threshold values\nrep1ct<-pcrbatch(rep1, fluo=NULL)\n\n#pcrbatch creates a file with each sample as an individual column in the dataframe. The problem with this is\n#that I want to compare all the Ct (labelled sig.cpD2) and generate expression data for them but these values have to be\n#in individual columns. To do this I must transpose the data and set the first row as the column names.\nrep1res<-setNames(data.frame(t(rep1ct)),rep1ct[,1])\n#Now I must remove the first row as it is a duplicate and will cause errors with future analysis\nrep1res<-rep1res[-1,]\n\n#since the sample names are now in the first column the column title is row.names. This makes analys hard based on the ability to call the first column.\n#to eliminate this issue, I copied the first column into a new column called \"Names\"\nrep1res$Names<-rownames(rep1res)\n\n#Since each sample name contains information such as Population, Treatment, and Sample Number I want to separate out these factors\n#into new columns so that I can run future analysis based on population, treatment, or both. Also note the \"drop = F\" this is so the original names column remains.\nrep1res2<-cSplit_f(rep1res, splitCols=c(\"Names\"), sep=\"_\", drop = F)\n\n#After splitting the names column into three new columns I need to rename them appropriately. \nrep1res2<-rename(rep1res2, c(\"Names_1\"=\"Pop\", \"Names_2\"=\"Treat\", \"Names_3\"=\"Sample\"))\n\n#I also create a column with the target gene name. This isn't used in this analysis but will be helpful for future work.\nrep1res2$Gene<-rep(\"Actin\", length(rep1res2))\n\n#In transposing the data frame, the column entries became factors which cannot be used for equations.\n#to fix this, I set the entries for sig.eff (efficiency) and sig.cpD2 (Ct value) to numeric. Be aware, without the as.character function the factors will be transformed inappropriately.\nrep1res2$sig.eff<-as.numeric(as.character(rep1res2$sig.eff))\nrep1res2$sig.cpD2<-as.numeric(as.character(rep1res2$sig.cpD2))\n\n#Now I plot the Ct values to see how they align without converting them to expression.\nggplot(rep1res2, aes(x=Names,y=sig.cpD2, fill=Pop))+geom_bar(stat=\"identity\")\n\n#Now I want to get expression information from my data set. qpcR has a way of doing this but its complicated and I'm not comfortable using it.\n#Luckily there is an equation I can use to do it. The equation is expression = 1/(1+efficiency)^Ctvalue. I tried multiple ways to get this to work in R\n#but it doesn't handle the complicated equation easily.\n#To work around this, I created a function in R to run the equation and produce an outcome. x = efficiency argument, y=Ctvalue argument\nexpr<-function(x,y){\n  newVar<-(1+x)^y\n  1/newVar\n}\n\n#Now I run the data through the function and produce a useful expression value\nrep1res2$expression<-expr(rep1res2$sig.eff, rep1res2$sig.cpD2)\n\n#Graphing the expression values is a good way to examine the data quickly for errors that might have occurred. \nggplot(rep1res2, aes(x=Names,y=expression, fill=Pop))+geom_bar(stat=\"identity\")\n\n#Before I'm able to compare the replicates I need to process the raw fluorescence from the second Actin run.\n#To do this I perform all the same steps as the previous replicate.\nrep2<-read.csv(\"Actin4rawfluoro.csv\", header = T)\nrep2$X<-NULL\nrep2<-rename(rep2, c(\"Cycle\" = \"Cycles\", \"A1\" = \"H_C_1\", \"A2\" = \"N_C_1\",\n                     \"A3\"= \"S_C_1\", \"A4\"=\"H_T_1\", \"A5\"=\"N_T_1\",\"A6\"=\"S_T_1\",\n                     \"A7\"=\"NT_C_1\",\"B1\" = \"H_C_2\", \"B2\" = \"N_C_2\",\"B3\"= \"S_C_2\",\n                     \"B4\"=\"H_T_2\", \"B5\"=\"N_T_2\", \"B6\"=\"S_T_2\",\"B7\"=\"NT_C_2\",\n                     \"C1\" = \"H_C_3\", \"C2\" = \"N_C_3\",\"C3\"= \"S_C_3\",\"C4\"=\"H_T_3\",\n                     \"C5\"=\"N_T_3\", \"C6\"=\"S_T_3\", \"C7\"=\"NT_C_3\",\"D1\" = \"H_C_4\",\n                     \"D2\" = \"N_C_4\",\"D3\"= \"S_C_4\", \"D4\"=\"H_T_4\", \"D5\"=\"N_T_4\",\n                     \"D6\"=\"S_T_4\", \"D7\"=\"NT_C_4\",\"E1\" = \"H_C_5\", \"E2\" = \"N_C_5\",\n                     \"E3\"= \"S_C_5\", \"E4\"=\"H_T_5\", \"E5\"=\"N_T_5\", \"E6\"=\"S_T_5\",\n                     \"F1\" = \"H_C_6\", \"F2\" = \"N_C_6\",\"F3\"= \"S_C_6\", \"F4\"=\"H_T_6\",\n                     \"F5\"=\"N_T_6\", \"F6\"=\"S_T_6\",\"G1\" = \"H_C_7\", \"G2\" = \"N_C_7\",\n                     \"G3\"= \"S_C_7\", \"G4\"=\"H_T_7\", \"G5\"=\"N_T_7\", \"G6\"=\"S_T_7\",\n                     \"H1\" = \"H_C_8\", \"H2\" = \"N_C_8\",\"H3\"= \"S_C_8\", \"H4\"=\"H_T_8\",\n                     \"H5\"=\"N_T_8\", \"H6\"=\"S_T_8\"))\n\nrep2ct<-pcrbatch(rep2, fluo=NULL)\n\nrep2res<-setNames(data.frame(t(rep2ct)),rep2ct[,1])\nrep2res<-rep2res[-1,]\n\nrep2res$Names<-rownames(rep2res)\n\nrep2res2<-cSplit_f(rep2res, splitCols=c(\"Names\"), sep=\"_\", drop = F)\n\nrep2res2<-rename(rep2res2, c(\"Names_1\"=\"Pop\", \"Names_2\"=\"Treat\", \"Names_3\"=\"Sample\"))\n\nrep2res2$Gene<-rep(\"Actin\", length(rep2res2))\n\nrep2res2$sig.eff<-as.numeric(as.character(rep2res2$sig.eff))\nrep2res2$sig.cpD2<-as.numeric(as.character(rep2res2$sig.cpD2))\n\nggplot(rep2res2, aes(x=Names,y=sig.cpD2, fill=Pop))+geom_bar(stat=\"identity\")\n\nexpr<-function(x,y){\n  newVar<-(1+x)^y\n  1/newVar\n}\n\nrep2res2$expression<-expr(rep2res2$sig.eff, rep2res2$sig.cpD2)\n\nggplot(rep2res2, aes(x=Names,y=expression, fill=Pop))+geom_bar(stat=\"identity\")\n\n#Now that I have Ct values, efficiencies and expression values for both replicates I can create a table of the differences between reps.\n#To do this I create a data frame with a single formula that creates a column of values generated by subtracting the first run from the second.\nrepcomp<-as.data.frame(rep1res2$sig.cpD2-rep2res2$sig.cpD2)\n\n#Now I need to add some Names for the samples to use with ggplot.Since the names column contains all the relevant information\n#I copy only that column and run the split function on it again as well as the rename function. \nrepcomp$Names<-rep1res2$Names\nrepcomp<-cSplit_f(repcomp, splitCols=c(\"Names\"), sep=\"_\", drop = F)\n\n#To better address the difference column in ggplot I need to rename it something simple and short. \nrepcomp<-rename(repcomp, c(\"rep1res2$sig.cpD2 - rep2res2$sig.cpD2\"=\"rep.diff\", \"Names_1\"=\"Pop\", \"Names_2\"=\"Treat\", \"Names_3\"=\"Sample\"))\n\n#Now I just run the data through ggplot to generate a bar graph exploring the differences between the two replicate in terms of Ct values.\nggplot(repcomp, aes(x=Names, y=rep.diff, fill=Pop))+geom_bar(stat=\"identity\")\n\n#Read in raw fluorescence data from 1st Actin replicate\nrep3<-read.csv(\"Actin1rawfluoro.csv\", header = T)\n#Remove blank first column entitled \"X\"\nrep3$X<-NULL\n#Rename columns so that qpcR package and appropriately handle the data\nrep3<-rename(rep3, c(\"Cycle\" = \"Cycles\", \"A1\" = \"H_C_1\", \"A2\" = \"N_C_1\",\n                     \"A3\"= \"S_C_1\", \"A4\"=\"H_T_1\", \"A5\"=\"N_T_1\",\"A6\"=\"S_T_1\",\n                     \"A7\"=\"NT_C_1\",\"B1\" = \"H_C_2\", \"B2\" = \"N_C_2\",\"B3\"= \"S_C_2\",\n                     \"B4\"=\"H_T_2\", \"B5\"=\"N_T_2\", \"B6\"=\"S_T_2\",\"B7\"=\"NT_C_2\",\n                     \"C1\" = \"H_C_3\", \"C2\" = \"N_C_3\",\"C3\"= \"S_C_3\",\"C4\"=\"H_T_3\",\n                     \"C5\"=\"N_T_3\", \"C6\"=\"S_T_3\", \"C7\"=\"NT_C_3\",\"D1\" = \"H_C_4\",\n                     \"D2\" = \"N_C_4\",\"D3\"= \"S_C_4\", \"D4\"=\"H_T_4\", \"D5\"=\"N_T_4\",\n                     \"D6\"=\"S_T_4\", \"D7\"=\"NT_C_4\",\"E1\" = \"H_C_5\", \"E2\" = \"N_C_5\",\n                     \"E3\"= \"S_C_5\", \"E4\"=\"H_T_5\", \"E5\"=\"N_T_5\", \"E6\"=\"S_T_5\",\n                     \"F1\" = \"H_C_6\", \"F2\" = \"N_C_6\",\"F3\"= \"S_C_6\", \"F4\"=\"H_T_6\",\n                     \"F5\"=\"N_T_6\", \"F6\"=\"S_T_6\",\"G1\" = \"H_C_7\", \"G2\" = \"N_C_7\",\n                     \"G3\"= \"S_C_7\", \"G4\"=\"H_T_7\", \"G5\"=\"N_T_7\", \"G6\"=\"S_T_7\",\n                     \"H1\" = \"H_C_8\", \"H2\" = \"N_C_8\",\"H3\"= \"S_C_8\", \"H4\"=\"H_T_8\",\n                     \"H5\"=\"N_T_8\", \"H6\"=\"S_T_8\"))\n\n#Run data through pcrbatch in qpcR package which analyzes fluorescence and produces efficiency and cycle threshold values\nrep3ct<-pcrbatch(rep3, fluo=NULL)\n\n#pcrbatch creates a file with each sample as an individual column in the dataframe. The problem with this is\n#that I want to compare all the Ct (labelled sig.cpD2) and generate expression data for them but these values have to be\n#in individual columns. To do this I must transpose the data and set the first row as the column names.\nrep3res<-setNames(data.frame(t(rep3ct)),rep3ct[,1])\n#Now I must remove the first row as it is a duplicate and will cause errors with future analysis\nrep3res<-rep3res[-1,]\n\n#since the sample names are now in the first column the column title is row.names. This makes analys hard based on the ability to call the first column.\n#to eliminate this issue, I copied the first column into a new column called \"Names\"\nrep3res$Names<-rownames(rep3res)\n\n#Since each sample name contains information such as Population, Treatment, and Sample Number I want to separate out these factors\n#into new columns so that I can run future analysis based on population, treatment, or both. Also note the \"drop = F\" this is so the original names column remains.\nrep3res2<-cSplit_f(rep3res, splitCols=c(\"Names\"), sep=\"_\", drop = F)\n\n#After splitting the names column into three new columns I need to rename them appropriately. \nrep3res2<-rename(rep3res2, c(\"Names_1\"=\"Pop\", \"Names_2\"=\"Treat\", \"Names_3\"=\"Sample\"))\n\n#I also create a column with the target gene name. This isn't used in this analysis but will be helpful for future work.\nrep3res2$Gene<-rep(\"Actin\", length(rep3res2))\n\n#In transposing the data frame, the column entries became factors which cannot be used for equations.\n#to fix this, I set the entries for sig.eff (efficiency) and sig.cpD2 (Ct value) to numeric. Be aware, without the as.character function the factors will be transformed inappropriately.\nrep3res2$sig.eff<-as.numeric(as.character(rep3res2$sig.eff))\nrep3res2$sig.cpD2<-as.numeric(as.character(rep3res2$sig.cpD2))\n\n#Now I plot the Ct values to see how they align without converting them to expression.\nggplot(rep3res2, aes(x=Names,y=sig.cpD2, fill=Pop))+geom_bar(stat=\"identity\")\n\n#Now I want to get expression information from my data set. qpcR has a way of doing this but its complicated and I'm not comfortable using it.\n#Luckily there is an equation I can use to do it. The equation is expression = 1/(1+efficiency)^Ctvalue. I tried multiple ways to get this to work in R\n#but it doesn't handle the complicated equation easily.\n#To work around this, I created a function in R to run the equation and produce an outcome. x = efficiency argument, y=Ctvalue argument\nexpr<-function(x,y){\n  newVar<-(1+x)^y\n  1/newVar\n}\n\n#Now I run the data through the function and produce a useful expression value\nrep3res2$expression<-expr(rep3res2$sig.eff, rep3res2$sig.cpD2)\n\n#Graphing the expression values is a good way to examine the data quickly for errors that might have occurred. \nggplot(rep3res2, aes(x=Names,y=expression, fill=Pop))+geom_bar(stat=\"identity\")\n\n#Before I'm able to compare the replicates I need to process the raw fluorescence from the second Actin run.\n#To do this I perform all the same steps as the previous replicate.\nrep4<-read.csv(\"Actin2rawfluoro.csv\", header = T)\nrep4$X<-NULL\nrep4<-rename(rep4, c(\"Cycle\" = \"Cycles\", \"A1\" = \"H_C_1\", \"A2\" = \"N_C_1\",\n                     \"A3\"= \"S_C_1\", \"A4\"=\"H_T_1\", \"A5\"=\"N_T_1\",\"A6\"=\"S_T_1\",\n                     \"A7\"=\"NT_C_1\",\"B1\" = \"H_C_2\", \"B2\" = \"N_C_2\",\"B3\"= \"S_C_2\",\n                     \"B4\"=\"H_T_2\", \"B5\"=\"N_T_2\", \"B6\"=\"S_T_2\",\"B7\"=\"NT_C_2\",\n                     \"C1\" = \"H_C_3\", \"C2\" = \"N_C_3\",\"C3\"= \"S_C_3\",\"C4\"=\"H_T_3\",\n                     \"C5\"=\"N_T_3\", \"C6\"=\"S_T_3\", \"C7\"=\"NT_C_3\",\"D1\" = \"H_C_4\",\n                     \"D2\" = \"N_C_4\",\"D3\"= \"S_C_4\", \"D4\"=\"H_T_4\", \"D5\"=\"N_T_4\",\n                     \"D6\"=\"S_T_4\", \"D7\"=\"NT_C_4\",\"E1\" = \"H_C_5\", \"E2\" = \"N_C_5\",\n                     \"E3\"= \"S_C_5\", \"E4\"=\"H_T_5\", \"E5\"=\"N_T_5\", \"E6\"=\"S_T_5\",\n                     \"F1\" = \"H_C_6\", \"F2\" = \"N_C_6\",\"F3\"= \"S_C_6\", \"F4\"=\"H_T_6\",\n                     \"F5\"=\"N_T_6\", \"F6\"=\"S_T_6\",\"G1\" = \"H_C_7\", \"G2\" = \"N_C_7\",\n                     \"G3\"= \"S_C_7\", \"G4\"=\"H_T_7\", \"G5\"=\"N_T_7\", \"G6\"=\"S_T_7\",\n                     \"H1\" = \"H_C_8\", \"H2\" = \"N_C_8\",\"H3\"= \"S_C_8\", \"H4\"=\"H_T_8\",\n                     \"H5\"=\"N_T_8\", \"H6\"=\"S_T_8\"))\n\nrep4ct<-pcrbatch(rep4, fluo=NULL)\n\nrep4res<-setNames(data.frame(t(rep4ct)),rep4ct[,1])\nrep4res<-rep4res[-1,]\n\nrep4res$Names<-rownames(rep4res)\n\nrep4res2<-cSplit_f(rep4res, splitCols=c(\"Names\"), sep=\"_\", drop = F)\n\nrep4res2<-rename(rep4res2, c(\"Names_1\"=\"Pop\", \"Names_2\"=\"Treat\", \"Names_3\"=\"Sample\"))\n\nrep4res2$Gene<-rep(\"Actin\", length(rep4res2))\n\nrep4res2$sig.eff<-as.numeric(as.character(rep4res2$sig.eff))\nrep4res2$sig.cpD2<-as.numeric(as.character(rep4res2$sig.cpD2))\n\nggplot(rep4res2, aes(x=Names,y=sig.cpD2, fill=Pop))+geom_bar(stat=\"identity\")\n\nexpr<-function(x,y){\n  newVar<-(1+x)^y\n  1/newVar\n}\n\nrep4res2$expression<-expr(rep4res2$sig.eff, rep4res2$sig.cpD2)\n\nggplot(rep4res2, aes(x=Names,y=expression, fill=Pop))+geom_bar(stat=\"identity\")\n\n#Now that I have Ct values, efficiencies and expression values for both replicates I can create a table of the differences between reps.\n#To do this I create a data frame with a single formula that creates a column of values generated by subtracting the first run from the second.\nrepcomp<-as.data.frame(rep3res2$sig.cpD2-rep4res2$sig.cpD2)\n\n#Now I need to add some Names for the samples to use with ggplot.Since the names column contains all the relevant information\n#I copy only that column and run the split function on it again as well as the rename function. \nrepcomp$Names<-rep3res2$Names\nrepcomp<-cSplit_f(repcomp, splitCols=c(\"Names\"), sep=\"_\", drop = F)\n\n#To better address the difference column in ggplot I need to rename it something simple and short. \nrepcomp<-rename(repcomp, c(\"rep3res2$sig.cpD2 - rep4res2$sig.cpD2\"=\"rep.diff\", \"Names_1\"=\"Pop\", \"Names_2\"=\"Treat\", \"Names_3\"=\"Sample\"))\n\n#Now I just run the data through ggplot to generate a bar graph exploring the differences between the two replicate in terms of Ct values.\nggplot(repcomp, aes(x=Names, y=rep.diff, fill=Pop))+geom_bar(stat=\"identity\")\n\nactstandard<-as.data.frame(cbind(rep1res2$expression,rep1res2$Names,rep1res2$Pop,rep1res2$Treat,rep2res2$expression,rep3res2$expression,rep4res2$expression,rep1res2$sig.cpD2,rep2res2$sig.cpD2,rep3res2$sig.cpD2,rep4res2$sig.cpD2))\nactstandard<-rename(actstandard, c(V1=\"rep1.expr\",\"V2\"=\"name\",\"V3\"=\"pop\",\"V4\"=\"treat\"\n                                   ,\"V5\"=\"rep2.expr\",\"V6\"=\"rep3.expr\",\"V7\"=\"rep4.expr\",\n                                   \"V8\"=\"rep1.Ct\",\"V9\"=\"rep2.Ct\",\"V10\"=\"rep3.Ct\",\"V11\"=\"rep4.Ct\"))\n\nactstandard$rep1.expr<-as.numeric(as.character(actstandard$rep1.expr))\nactstandard$rep2.expr<-as.numeric(as.character(actstandard$rep2.expr))\nactstandard$rep3.expr<-as.numeric(as.character(actstandard$rep3.expr))\nactstandard$rep4.expr<-as.numeric(as.character(actstandard$rep4.expr))\n\n\n\nactstandard$avgexpr<-rowMeans(actstandard[,c(\"rep1.expr\",\"rep2.expr\",\"rep3.expr\",\"rep4.expr\")],na.rm=F)\n\nactstandard<-actstandard[which(actstandard$pop!=c(\"NT\")),]\n\nggplot(actstandard, aes(x=treat,y=avgexpr, fill=pop))+geom_boxplot()\nggplot(actstandard, aes(x=name, y=avgexpr, fill=pop))+geom_bar(stat=\"identity\")\n\nggplot(actstandard, aes(x=pop,y=avgexpr, fill=pop))+geom_boxplot()\n\nfit<-aov(avgexpr~pop+treat+pop:treat,data=actstandard)\nfit\nTukeyHSD(fit)\n\nfit2<-aov(avgexpr ~ pop, data=actstandard[which(actstandard$treat == \"C\"), ])\nfit2\nTukeyHSD(fit2)\n\nfit3<-aov(avgexpr~pop, data=actstandard[which(actstandard$treat == \"T\"), ])\nfit3\nTukeyHSD(fit3)\n\nfit4<-t.test(avgexpr~treat, data=actstandard[which(actstandard$pop==\"H\"),])\nfit4\n\nfit5<-t.test(avgexpr~treat, data=actstandard[which(actstandard$pop==\"N\"),])\nfit5\n\nfit6<-t.test(avgexpr~treat, data=actstandard[which(actstandard$pop==\"S\"),])\nfit6\n\n\n\n",
    "created" : 1436462396327.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2869053517",
    "id" : "2D6EB7CE",
    "lastKnownWriteTime" : 1437442173,
    "path" : "~/GitHub/Resilience-Project/qPCR data/raw fluoro/actinstandard.R",
    "project_path" : null,
    "properties" : {
        "notebook_format" : "html_document",
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}